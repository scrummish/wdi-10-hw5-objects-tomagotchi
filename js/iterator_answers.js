///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// .forEach is a basic iterator; all it does is step through each item in an array.
// Using the array words, log each word in words in upper case using .forEach.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const words = ["Ho", "Chi", "Minh", "City", "was", "once", "known", "as", "Prey", "Nokor"];

words.forEach((a)=>{
	console.log(a.toUpperCase()) // takes each element in the array and makes it all caps
})

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Map
// .map is like .forEach but it returns a new array with the selections and / or transformations applied in the iterator. .map saves to a new array and does not alter the original array.
// Map to a new array that stores only the first letter from each word in more_words.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const more_words = ["Joe", "Overeats", "Eggs"];

let mappedArr = more_words.map((a)=>{
	return a[0]; // returns the 1st character in each element in the array
});

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// reduce
// .reduce iterates over the elements in an array and smooshes them together into a single variable according to the instructions in the iterator. Like .map, 
// it returns a new value and does not alter the original array.
// Return the product of the numbers in arr.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const arr = [8, 8, 8, 8, 8, 8, 8, 8];

let reducedArray = arr.reduce((a,b)=>{
	return a + b // Adds the first element to the next until there is no more to add and returns that value
})

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Chaining
// Using iterators to find the total sheepCount of sheep shorn by sheep shearers at the 1623 Sheep Shearing Feast:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const sheepShearers = [
    {
        name: "Tim",
        age: 20,
        sheepCount: 18
    },
    {
        name: "C3PO",
        age: 200,
        sheepCount: 320
    },
    {
        name: "Cousin It",
        age: Infinity,
        sheepCount: 2900
    }
];

let output = sheepShearers.map((a)=>{
	return a.sheepCount // returns new array with only the sheepCount properties
}).reduce((a,b)=>{
	return a + b // adds the values of those prior returned sheepCount properties and returns it
})






